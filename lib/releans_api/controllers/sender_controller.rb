# releans_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReleansApi
  # SenderController
  class SenderController < BaseController
    @instance = SenderController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Return the details of the sender name.
    # @param [String] id Required parameter: Example:
    # @param [String] accept Required parameter: Example:
    # @return Mixed response from the API call
    def get_sender_name_details(id,
                                accept)
      # Prepare query url.
      _path_url = '/sender/view/'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'id' => id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create a new sender id to send messages using it
    # @param [String] accept Required parameter: Example:
    # @param [String] content_type Required parameter: Example:
    # @param [String] body Required parameter: Example:
    # @return Response200 response from the API call
    def create_sender_name(accept,
                           content_type,
                           body)
      # Prepare query url.
      _path_url = '/sender/create'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Content-Type' => content_type
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      Response200.from_hash(decoded)
    end

    # List all senders names associated with the account
    # @param [String] accept Required parameter: Example:
    # @return List of Response2001 response from the API call
    def get_all_senders(accept)
      # Prepare query url.
      _path_url = '/sender'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      decoded.map { |element| Response2001.from_hash(element) }
    end
  end
end
