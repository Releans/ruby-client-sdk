# releans
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Releans
  # MessageController
  class MessageController < BaseController
    @instance = MessageController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # List all messages sent by the account.
    # @return Mixed response from the API call
    def get_all_messages
      begin
        @logger.info("get_all_messages called.")
        # Prepare query url.
        @logger.info("Preparing query URL for get_all_messages.")
        _path_url = '/message'
        _query_builder = Configuration.base_uri.dup
        _query_builder << _path_url
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for get_all_messages.")
        _headers = {
          'accept' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for get_all_messages.')
        _request = @http_client.get(
          _query_url,
          headers: _headers
        )
        OAuth2.apply(_request)
        _context = execute_request(_request, name: 'get_all_messages')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for get_all_messages.")
        return nil if _context.response.status_code == 404
          @logger.info("Status code 404 received for get_all_messages. Returning nil.")
        validate_response(_context)
  
        # Return appropriate response type.
        @logger.info("Returning response for get_all_messages.")
        decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
          _context.response.raw_body.nil? ||
          _context.response.raw_body.to_s.strip.empty?
        decoded

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # Return cost of sending a message to the number.
    # @param [String] mobile_number Required parameter: Mobile number you want
    # to know the price of sending a message.
    # @return String response from the API call
    def get_price_of_message(mobile_number)
      begin
        @logger.info("get_price_of_message called.")
        # Validate required parameters.
        @logger.info("Validating required parameters for get_price_of_message.")
        validate_parameters(
          'mobile_number' => mobile_number
        )
        # Prepare query url.
        @logger.info("Preparing query URL for get_price_of_message.")
        _path_url = '/message/price'
        _query_builder = Configuration.base_uri.dup
        _query_builder << _path_url
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          {
            'mobileNumber' => mobile_number
          },
          array_serialization: Configuration.array_serialization
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for get_price_of_message.')
        _request = @http_client.get(
          _query_url
        )
        OAuth2.apply(_request)
        _context = execute_request(_request, name: 'get_price_of_message')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for get_price_of_message.")
        return nil if _context.response.status_code == 404
          @logger.info("Status code 404 received for get_price_of_message. Returning nil.")
        validate_response(_context)
  
        # Return appropriate response type.
        @logger.info("Returning response for get_price_of_message.")
        _context.response.raw_body

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # Return the details of the message.
    # @param [String] id Required parameter: Id of the message you need to
    # return its details.
    # @return Mixed response from the API call
    def get_view_message(id)
      begin
        @logger.info("get_view_message called.")
        # Validate required parameters.
        @logger.info("Validating required parameters for get_view_message.")
        validate_parameters(
          'id' => id
        )
        # Prepare query url.
        @logger.info("Preparing query URL for get_view_message.")
        _path_url = '/message/view'
        _query_builder = Configuration.base_uri.dup
        _query_builder << _path_url
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          {
            'id' => id
          },
          array_serialization: Configuration.array_serialization
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for get_view_message.")
        _headers = {
          'accept' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for get_view_message.')
        _request = @http_client.get(
          _query_url,
          headers: _headers
        )
        OAuth2.apply(_request)
        _context = execute_request(_request, name: 'get_view_message')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for get_view_message.")
        return nil if _context.response.status_code == 404
          @logger.info("Status code 404 received for get_view_message. Returning nil.")
        validate_response(_context)
  
        # Return appropriate response type.
        @logger.info("Returning response for get_view_message.")
        decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
          _context.response.raw_body.nil? ||
          _context.response.raw_body.to_s.strip.empty?
        decoded

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # Send a single message.
    # @param [String] sender_id Required parameter: Sender id to send the
    # message from.
    # @param [String] mobile_number Required parameter: The mobile number
    # supposed to receive the message.
    # @param [String] message Required parameter: Message text.
    # @return String response from the API call
    def create_send_sms_message(sender_id,
                                mobile_number,
                                message)
      begin
        @logger.info("create_send_sms_message called.")
        # Validate required parameters.
        @logger.info("Validating required parameters for create_send_sms_message.")
        validate_parameters(
          'sender_id' => sender_id,
          'mobile_number' => mobile_number,
          'message' => message
        )
        # Prepare query url.
        @logger.info("Preparing query URL for create_send_sms_message.")
        _path_url = '/message/send'
        _query_builder = Configuration.base_uri.dup
        _query_builder << _path_url
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare form parameters.
        @logger.info("Preparing form parameters for create_send_sms_message.")
        _parameters = {
          'senderId' => sender_id,
          'mobileNumber' => mobile_number,
          'message' => message
        }
        _parameters = APIHelper.form_encode_parameters(_parameters)
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for create_send_sms_message.')
        _request = @http_client.post(
          _query_url,
          parameters: _parameters
        )
        OAuth2.apply(_request)
        _context = execute_request(_request, name: 'create_send_sms_message')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for create_send_sms_message.")
        return nil if _context.response.status_code == 404
          @logger.info("Status code 404 received for create_send_sms_message. Returning nil.")
        validate_response(_context)
  
        # Return appropriate response type.
        @logger.info("Returning response for create_send_sms_message.")
        _context.response.raw_body

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end
  end
end
